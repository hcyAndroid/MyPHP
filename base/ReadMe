1.include 和 require 的区别

include 的错误级别较轻（warning），不会影响代码的执行。碰到一次，执行一次
include_once  只执行一次


require 要求较高（Fatal error），如果代码出错不再往下执行，碰到一次，执行一次
require_once  只执行一次


2.为什么总是忽略不掉一些文件，只要是因为提交到了本地仓库，只要不提交就可以忽略这些文件
3.ps如何配置MAMP
4.文件加载路径
5.函数
  函数体
允许实参多于形参
形参可以赋默认值

function  函数Name(){


}

6.引用传值必须是变量
__FUNCTION__ 输出函数名

7.超全局变量
会自动把全局变量放进这个超全局变量的数组里
$GLOBALS['全局变量名'] 来访问全局变量

函数里访问全局变量的方式
1.
$a="555555";
function test(){
    global  $a;
    echo  $a;
}
test();

2.
$a="5555551";
function  test(){

    echo  $GLOBALS['a'];
}
test();

8.静态变量,定义在函数内部。
9.可变函数
function test()
{
    echo "hellow";
}

$a = 'test';
$a();
10.匿名函数
$a=function(){
    echo "hellow111";
};
$a();

(function(){
    echo "hellow2222";
})();

11.闭包函数

use 就是讲外部的局部变量保存在函数内部使用

function  func1(){
    $num=20001;
    $func2=function () use ($num){
        echo $num;
    };

    $func2();
}

func1();


12.伪类型
13.系统函数
print();  返回值是1
date():  print_r(date("Y-m-d,H:i:s"));
mt_rand();随机数
cell();//向上取整
floor();//向下取整
function_exists();//判断函数名是否在内存中存在
14.错误处理
15.抛出异常
trigger_error("errormsg");
E_USER_NOTICE
E_USER_WARNING
E_USER_ERROR
E_USER_DEPRECATED
16.自定义错误处理
/**
 * @param $errNum
 * @param $errMsg
 * @param $errFile
 * @param $errLine
 * @param $errContext
 */

function error_msg($errNum, $errMsg, $errFile, $errLine, $errContext)
{
    //查看当前系统可以看到的错误
    if (!(error_reporting() & $errNum)) {
        return false;
    }
    switch ($errNum) {
        case E_ERROR:
        case E_USER_ERROR:
            echo "在" . $errFile . "文件里的第" . $errLine . "行发生fatal Error,错误信息为:" . $errMsg;
            break;
        case E_WARNING:
        case E_USER_WARNING:
            echo "在" . $errFile . "文件里的第" . $errLine . "行发生Warning,错误信息为:" . $errMsg;
            break;

        case E_NOTICE:
        case E_USER_NOTICE:
            echo "在" . $errFile . "文件里的第" . $errLine . "行发生E_NOTICE,错误信息为:" . $errMsg;
            break;

    }
    return true;
}

//修改错误机制
set_error_handler("error_msg");
$a=10;
echo $a/0;

17.字符串
''
""
nowdoc
heredoc


